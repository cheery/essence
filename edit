#!/usr/bin/env python

from argparse import ArgumentParser
parser = ArgumentParser(description="""
    Edit tree files specified by essence project.
""")
parser.add_argument('filename', nargs='?')
args = parser.parse_args()

from essence2 import vec2, rgba, rectangle, clamp
from essence2 import graphics
from essence2.fields import ListField, TextField, Selection
from essence2 import ui
from essence2 import grammar
import sys

grammar_language = grammar.Language([
    grammar.Symbolic('rule', ('name', 'name*')),
    grammar.Symbolic('group', ('name', 'name*')),
    grammar.Symbolic('data', ('name', 'type')),
    grammar.Data('data', 'text'),
    grammar.Data('name', 'text'),
], root='rule')

language = grammar.Language([
    grammar.Group('statement', ('call', 'def')),
    grammar.Group('expression', ('var', 'call', 'number')),
    grammar.Symbolic('call', ('expression', 'expression*')),
    grammar.Symbolic('def', ('var', 'var*', 'statement*')),
    grammar.Data('var', 'text'),
    grammar.Data('number', 'text'),
], root='statement*')

print language.text()


red = rgba(255, 0, 0)
green = rgba(80, 255, 80)
blue = rgba(0, 0, 255)
black = rgba(0, 0, 0)
white = rgba(255, 255, 255)
gray = rgba(0x70, 0x70, 0x70)
yellow = rgba(255, 255, 0)
selc = graphics.blend_sub(rgba(80, 80, 0, 50))
background_color = rgba(0x20, 0x30, 0x40)
border = graphics.Patch9.load('assets/border.png')
marker = graphics.Patch9.load('assets/box.marker.png')
font = graphics.Font.load('font/proggy_tiny')

root = ListField([
    ListField([
        TextField("test", name='var'),
        ListField([], name='var*'),
        ListField([], name='statement*'),
    ], name='def'),
    None,
    ListField([
        TextField("test", name='var'),
        ListField([
            TextField("hello world", name='string'),
        ], name='expression*'),
    ], name='call'),
    ListField([
        TextField('inv_mat', name='var'),
        ListField([
            ListField([
                ListField([
                    TextField('i', name='var'),
                    TextField('j', name='var'),
                ], name='add'),
                TextField('k', name='var'),
            ], name='multiply'),
            TextField('det', name='var'),
        ], name='divide'),
    ], name='multiply'),
], name="statement*")

def visualize(field, visualizer):
    res = visualizer(field)
    res.target = field
    return res

def visualize_list(fields, visualizer, separator=None, header=None, footer=None, stub=None):
    res = []
    if header:
        res.append(header)
    slot = 0
    for slot, field in enumerate(fields):
        if slot != 0 and separator:
            res.append(separator.dup())
        out = visualize(field, visualizer)
        out.segment = (fields, slot)
        res.append(out)
    if len(fields) == 0 and stub:
        res.append(stub)
    if footer:
        res.append(footer)
    return res

def many(fields, separator=None, header=None, footer=None, stub=None):
    return visualize_list(fields, build_layout, separator, header, footer, stub)

variable_field = dict(
    font = font,
    postprocess = graphics.blend_mult(rgba(192, 192, 192)),
)

string_field = dict(
    font = font,
    postprocess = graphics.blend_mult(rgba(192, 192, 0)),
)

syntax_field = dict(
    font = font,
)

spacer = dict(
    min_size = vec2(8, 8),
)

math_field = dict(
    align_by = ui.mathline,
)

div_box = dict(
    align_by = ui.mathline,
    compress = 'horizontal',
)

div_spacer = dict(
    min_size = vec2(20, 1),
    background = rgba(255, 255, 255),
    expand = 'horizontal',
)

unknown_element_name = dict(
    font = font,
    postprocess = graphics.blend_mult(rgba(255, 0, 0)),
)
unknown_element_list = dict(
)

unknown_element_border = dict(
    background = border,
    padding = (4, 4, 4, 4),
)
unknown_element_text = dict(
    font = font,
)
unknown_element_none = dict(
    font = font,
    postprocess = graphics.blend_mult(rgba(255, 128, 0)),
)

empty_slot = dict(
    font = font,
    postprocess = graphics.blend_mult(rgba(128, 128, 128)),
)

binop_fields = {
    'add':      ('+', 10),
    'sub':      ('-', 10),
    'multiply': ('*', 20),
    'divide':   ('/', 20),
}

def valid_binop(field):
    if isinstance(field, ListField) and field.name in binop_fields and len(field) == 2:
        return True

def build_layout(field):
    if False:
        pass
    elif field == None:
        out = ui.Label(syntax_field, "none")
    elif valid_binop(field):
        left, right = field

        sym, prec = binop_fields[field.name]

        leftside = build_layout(left)
        rightside = build_layout(right)
        if field.name == 'divide':
            out = ui.Column(div_box, [leftside, ui.Space(div_spacer), rightside])
        else:
            if valid_binop(left) and prec > binop_fields[left.name][1]:
                leftside = ui.Row(math_field, [
                    ui.Label(syntax_field, '('),
                    leftside,
                    ui.Label(syntax_field, ')'),
                ])
            if valid_binop(right) and prec > binop_fields[right.name][1]:
                rightside = ui.Row(math_field, [
                    ui.Label(syntax_field, '('),
                    rightside,
                    ui.Label(syntax_field, ')'),
                ])

            if field.name == 'multiply' and valid_binop(right) and right.name == 'divide':
                out = ui.Row(math_field, [leftside, rightside])
            else:
                out = ui.Row(math_field, [
                    leftside,
                    ui.Space(spacer), ui.Label(syntax_field, sym), ui.Space(spacer),
                    rightside,
                ])
    elif field.name == 'def' and len(field) == 3:
        name, arguments, body = field

        if isinstance(arguments, ListField) and arguments.name == 'var*':
            arglist = ui.Row({}, many(arguments, header=ui.Label(syntax_field, '('), footer=ui.Label(syntax_field, ')'), separator=ui.Label(syntax_field, ',')))
        else:
            arglist = build_layout(arguments)

        if isinstance(body, ListField) and body.name == 'statement*':
            bodylist = ui.Column({}, many(body, stub=ui.Label(syntax_field, 'pass')))
        else:
            bodylist = build_layout(body)

        out = ui.Column({'align_by':ui.left}, [
            ui.Row({}, [
                ui.Label(syntax_field, "def"),
                ui.Space(spacer),
                build_layout(name),
                arglist,
            ]),
            ui.Padding({'padding':(20, 0, 0, 0), 'expand':'horizontal'}, bodylist),
        ])
    elif field.name == 'call' and len(field) == 2:
        callee, arguments = field

        if isinstance(arguments, ListField) and arguments.name == 'expression*':
            arglist = ui.Row({}, many(arguments, header=ui.Label(syntax_field, '('), footer=ui.Label(syntax_field, ')'), separator=ui.Label(syntax_field, ',')))
        else:
            arglist = build_layout(arguments)

        out = ui.Row({}, [
            build_layout(callee),
            arglist,
        ])
    elif field.name == 'statement*':
        out = ui.Column({}, many(field, stub=ui.Label(syntax_field, "empty statement list")))
    elif isinstance(field, ListField):
        out = ui.Row(unknown_element_list, [
            ui.Padding(unknown_element_border, 
                ui.Column(unknown_element_list, many(field, stub=ui.Label(empty_slot, "empty"))),
            ),
            ui.Label(unknown_element_name, ":%s" % field.name),
        ])
        pass
    elif field.name == 'string':
        out = ui.Row({}, [
            ui.Label(string_field, '"'),
            ui.Label(string_field, field),
            ui.Label(string_field, '"'),
        ])
    elif field.name == 'var':
        out = ui.Label(variable_field, field)
    elif isinstance(field, TextField):
        out = ui.Row(unknown_element_list, [
            ui.Label(unknown_element_text, field),
            ui.Label(unknown_element_name, ":%s" % field.name),
        ])
    else:
        raise Exception('build_layout(%r)' % element)

    return out



def coffeesipper_view(field):
    if False:
        pass
#    elif isinstance(field, TextField):
#        out = ui.Label(font, field)

    if field.name == 'statement*':
        passer = ui.Label(font, 'pass')
        passer.postprocess = graphics.blend_mult(green)
        out = ui.Column(visualize_list(field, coffeesipper_view,
            stub=passer,
        ))
        out = ui.Pad((10, 0, 0, 0), out)
        out.placement = 'y'
#        for child in out.children:
#            child.align = 0.0, 0.5
#        out.extend = 1
    elif field.name == 'call':
        out = ui.Row(visualize_list(field, coffeesipper_view))
#        passer = ui.Label('call')
#        passer.blend = graphics.blend_mult(green)
#        out = ui.List(visualize_list(field, coffeesipper_view,
#            header=passer,
#        ))
#        out.extend = 1
#        for index, child in enumerate(out.children):
#            if index > 0:
#                child.extend = 1
#                child.align = 0.1, 0.5
#            else:
#                child.align = 0.0, 0.5
    elif field.name == 'var*':
        out = ui.Row(visualize_list(field, coffeesipper_view,
            separator = ui.Label(font, ','),
            header = ui.Label(font, '('),
            footer = ui.Label(font, ')'),
        ))
    elif field.name == 'expression*':
        out = ui.Row(visualize_list(field, coffeesipper_view,
            separator = ui.Row([ui.Label(font, ','), ui.Spacer(vec2(8, 8))]),
            header = ui.Label(font, '('),
            footer = ui.Label(font, ')'),
        ))
    elif field.name == 'def' and len(field) == 3:
        name, args, body = visualize_list(field, coffeesipper_view)
        ident = ui.Label(font, 'def')
        ident.blend = graphics.blend_mult(green)

        top = ui.Row([ident, ui.Spacer(vec2(8, 8)), name, args])
        out = ui.Column([
            top,
            body,
        ])

#        ident.align = 0.0, 0.0
#        name.align = 0.05, 0.0
#        args.align = 0.05, 0.0
#        body.align = 0.05, 0.0
#        out = ui.List([ident, name, args, body])
#        out.extend = 1
#        out.align = 0.0, 0.5
    elif isinstance(field, ListField):
        header = ui.Label(font, field.name)
        header.postprocess = graphics.blend_mult(green)
        stub = ui.Label(font, "empty")
        stub.postprocess = graphics.blend_mult(gray)
        out = ui.Column([
                header,
                ui.Pad((10, 0, 0, 0),
                    ui.Column(visualize_list(field, coffeesipper_view,
                        stub=stub,
                    ))
                ),
            ],
        )
    elif field.name == 'string':
        deco = ui.Label(font, '"')
        deco.postprocess = graphics.blend_mult(yellow)
        out = ui.Label(font, field, segment=(field,0))
        out.postprocess = graphics.blend_mult(yellow)
        out = ui.Row([deco, out, deco.dup()])
        out.placement = 'text+'

    elif field.name == 'var':
        out = ui.Label(font, field)
        #out.postprocess = graphics.blend_mult(yellow)
#    elif isinstance(field, ListField):
#        out = ui.List(visualize_list(field, coffeesipper_view,
#            header = ui.Label("%s" % field.name)
#        ))
#        out.background = border
    elif isinstance(field, TextField):
        out = ui.Label(font, field)
        out.background = border
    return out

def build_view(field):
    return visualize(field, coffeesipper_view)
#    if isinstance(field, TextField):
#        out = ui.Label(field)
#        out.align = 0.0, 0.5
#        out.extend = 1
#        return out
#    assert isinstance(field, ListField)
#    children = []
#    children.append(ui.Label("*** %s ***" % field.name))
#    for index, subfield in enumerate(field):
#        if index != 0:
#            children.append(ui.Label("--- ---"))
#        subview = build_view(subfield)
#        subview.slot = index
#        children.append(subview)
#    children.append(ui.Label("*** ***"))
#    out = ui.List(children, field)
#    out.background = border
#    out.padding = 10, 10, 5, 5
#    out.spacing = 3
#    out.extend = 1
#    return out

def traverse(current):
    yield current
    if isinstance(current, ui.List):
        for subview in current.children:
            for descview in traverse(subview):
                yield descview

def draw_selection(screen, view, selection):
    floor = ui.find_target(view, selection.field)
    around = floor.geometry.offset((8,8,8,8))
    screen(marker, around)

    if floor.placement == 'x':
        for element in ui.find_segments(floor, selection.field):
            s = ui.seg_selection_x(element, selection.start, selection.stop)
            if s:
                screen(selc, s)
    elif floor.placement == 'y':
        for element in ui.find_segments(floor, selection.field):
            s = ui.seg_selection_y(element, selection.start, selection.stop)
            if s:
                screen(selc, s)
    elif floor.placement == 'text':
        s = floor.selection(selection.start, selection.stop)
        if s:
            screen(selc, s)
    elif floor.placement == 'text+':
        start = selection.start
        stop = selection.stop
        for element in ui.find_segments(floor, selection.field):
            if isinstance(element, ui.Label):
                _, base = element.segment
                ln = len(element.source)
                if start <= base + ln and stop >= base:
                    _start = clamp(base, base+ln, start)
                    _stop = clamp(base, base+ln, stop)
                    s = element.selection(_start, _stop)
                    if s:
                        screen(selc, s)
            else:
                s = ui.seg_selection_x(element, selection.start, selection.stop)
                if s:
                    screen(selc, s)

#    if view.field == selection.field:
#        screen(selc, view.selection(selection.start, selection.stop))
#        screen(white, view.caret(selection.head))
#        return True
#    if isinstance(view, ui.List):
#        for subview in view.children:
#            if draw_selection(screen, subview, selection):
#                return True
#    else:
#        return False

selection = Selection(root, 0, len(root))
selection.drag = False
view = None

default0 = dict(
    font = font,
    background = border,
#    inner_background = border,
    align_by = ui.center,
    padding = (20, 20, 20, 20),
    expand = 'both',
)
default1 = dict(
    font = font,
    min_size = vec2(8, 8),
    expand = 'both',
)
default2 = dict(
    font = font,
    postprocess = graphics.blend_mult(gray),
)

import time, math

def on_frame(screen):
    global view
    screen(background_color)
    width, height = screen.size

    now = time.time()
    left = 10
    top = 10
    right = min(400, width - 20)
    bottom = height - 20

    root_config = dict(
        align_by = ui.center,
    )

    layout = ui.Layout()
    #solver.autosolve = True
    view = ui.Root(root_config, build_layout(root))
    view.constrain(
        view.outer.left == left,
        view.outer.top  == top,
        (view.outer.right >= right),
        (view.outer.bottom >= bottom),
    )
    view.feed(layout)
    view.draw(screen)
    
    #default0,
    #    ui.Column(default0, [
    #        ui.Row(default0, [
    #            ui.Label(default1, "user"),
    #            ui.Label(default2, " = "),
    #            ui.Label(default1, "superman"),
    #            ui.Label(default2, ";"),
    #        ]),
    #        ui.Padding(default0,
    #            ui.Row(default0, [
    #                ui.Label(default1, "author"),
    #                ui.Space(default1),
    #                ui.Label(default2, "is"),
    #                ui.Space(default1),
    #                ui.Label(default2, "exceedingly"),
    #                ui.Space(default1),
    #                ui.Label(default1, "magnificent"),
    #            ])
    #        )
    #    ])
    #)
#    a = ui.ConstraintVariable('a')
#    b = ui.ConstraintVariable('b')
#    c = ui.ConstraintVariable('c')
#    d = ui.ConstraintVariable('d')
#    e = ui.ConstraintVariable('e')
#    f = ui.ConstraintVariable('f')
#    right = ui.ConstraintVariable('right')
#    variables = a,b,c,d,e,f, right
#
#    for var in variables:
#        solver.add_constraint(0 <= var)
#        solver.add_constraint((var <= screen.size.x) | ui.strong)
#
#    rules = [
#        a + 20 <= b,
#        b + 20 <= c,
#        c + 20 <= d,
#        d + 20 <= e,
#        e + 20 <= f,
#        f <= right,
#        (right == screen.size.x - 10) | ui.strong,
#
#        (c == 0) | ui.weak,
#        (d == right) | ui.weak,
#
#        (e == 0) | ui.weak,
#        (f == right) | ui.weak,
#    ]
#
#    for rule in rules:
#        solver.add_constraint(rule)
#
#
#    for i, var in enumerate(variables):
#        s = font(var.name)
#        s.geometry.base = vec2(var.value, 100 + 10 * i)
#        screen(black, rectangle(vec2(var.value, 10), vec2(1, 180)))
#        screen(s)

#
#    size = screen.size
#
#    solver.add_constraint(0 <= view.x0)
#    solver.add_constraint(0 <= view.y0)
#    solver.add_constraint((view.x3 <= size.y) | ui.strong)
#    solver.add_constraint((view.y3 <= size.y) | ui.strong)
#
#    solver.add_constraint((view.x0 == 0) | ui.strong)
#    solver.add_constraint((
#        (view.y0 + view.y3) / 2 == size.y / 2
#    ) | ui.strong)
#
#    view.draw(screen)


    #view = build_view(root)
#    view = ui.Column([
#        ui.Row([
#            ui.Label(font, "jello"),
#            ui.Spacer(vec2(10, 0)),
#            ui.Label(font, "such a Nice"),
#        ]),
#        ui.Spacer(vec2(0, 3)),
#        ui.Label(font, "world"),
#    ])
#    size, extend = view.layout0()
#    view.layout1(rectangle(vec2(0, 0), size.maximum(screen.size)))
#    view.draw(screen)
#    draw_selection(screen, view, selection)

def on_resize(width, height):
    pass

def on_keydown(key, mod, text):
    shift = 'shift' in mod
    if key == 'left':
        selection.move(selection.head-1, shift)
    elif key == 'right':
        selection.move(selection.head+1, shift)
    elif key == 'delete' or key == 'backspace':
        if selection.head == selection.tail:
            i = {'delete':+1, 'backspace':-1}[key]
            selection.move(selection.head+i, True)
        selection.replace('')
    elif key == 'home':
        selection.move(0, shift)
    elif key == 'end':
        selection.move(len(selection.field), shift)
    elif key == 'escape':
        sys.exit(0)
    elif key == 'l' and isinstance(selection.field, ListField):
        selection.replace([ListField([], name="list")])
    elif key == 'r' and isinstance(selection.field, ListField):
        selection.replace([ListField([], name="row")])
    elif key == 't' and isinstance(selection.field, ListField):
        selection.replace([TextField('add text here')])
    elif len(text) > 0:
        if isinstance(selection.field, TextField):
            selection.replace(text)
    else:
        print key, mod, text

def on_keyup(key, mod):
    pass

def pick(view, position):
    match = None
    for descview in traverse(view):
        if isinstance(descview.field, (TextField, ListField)) and descview.outer.inside(position):
            match = descview
    return match

def on_motion(position, velocity, buttons):
    if buttons[0] == 1 and selection.drag:
        nearest = nearest_caret(selection.drag, position)
        selection.move(nearest, True)
#

def nearest_caret(element, position):
    if element.placement == 'x':
        nearest, d = ui.segs_nearest_caret_x(
            ui.find_segments(element, element.target),
            position
        )
    elif element.placement == 'y':
        nearest, d = ui.segs_nearest_caret_y(
            ui.find_segments(element, element.target),
            position
        )
    elif element.placement == 'text':
        nearest, d = element.nearest_caret(position)
    else:
        nearest = 0
    return nearest

def on_buttondown(position, button):
    if button == 1:
        element = None
        for element in ui.pick(view, position):
            pass
        if element:
            nearest = nearest_caret(element, position)
            selection.field = element.target
            selection.move(nearest, False)
            selection.drag = element

def on_quit():
    pass

def event(name, arguments):
    name = 'on_' + name
    g = globals()
    if name in g:
        g[name](*arguments)
    else:
        print name, arguments

# SDL starts the eventloop, and I'm not proud about it.
# unfortunately python did not have standard event loop implementation.
# this is the price for ignorance of events.
# Also, SDL allows only one window
# so there's no point with window abstraction.
if __name__ == "__main__":
    graphics.eventloop(emit=event)
